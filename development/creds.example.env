################################################################################
# CREDS File: Store private information. Copied to creds.env and always ignored
################################################################################
# Nautobot Configuration Secret Items
NAUTOBOT_CREATE_SUPERUSER=true
NAUTOBOT_DB_PASSWORD=changeme
NAUTOBOT_NAPALM_USERNAME=''
NAUTOBOT_NAPALM_PASSWORD=''
NAUTOBOT_REDIS_PASSWORD=changeme
NAUTOBOT_SECRET_KEY='changeme'
NAUTOBOT_SUPERUSER_NAME=admin
NAUTOBOT_SUPERUSER_EMAIL=admin@example.com
NAUTOBOT_SUPERUSER_PASSWORD=admin
NAUTOBOT_SUPERUSER_API_TOKEN=0123456789abcdef0123456789abcdef01234567

# Postgres
POSTGRES_PASSWORD=${NAUTOBOT_DB_PASSWORD}
PGPASSWORD=${NAUTOBOT_DB_PASSWORD}

# MySQL Credentials
MYSQL_ROOT_PASSWORD=${NAUTOBOT_DB_PASSWORD}
MYSQL_PASSWORD=${NAUTOBOT_DB_PASSWORD}

# Use these to override values in development.env
# NAUTOBOT_DB_HOST=localhost
# NAUTOBOT_REDIS_HOST=localhost
# NAUTOBOT_CONFIG=development/nautobot_config.py

# Use this for token and user vars

# NAUTOBOT_GOLDEN_CONFIG_GIT_TOKEN=<your-token>
# NAUTOBOT_GOLDEN_CONFIG_GIT_USERNAME=<your-username>

# Use this for token creation

# from nautobot.extras.models.secrets import Secret, SecretsGroup, SecretsGroupAssociation
# from nautobot.extras.choices import SecretsGroupAccessTypeChoices, SecretsGroupSecretTypeChoices

# secrets_group = SecretsGroup(name="Secrets Group 1")
# secrets_group.validated_save()

# environment_secret = Secret.objects.create(
#     name="Environment Variable Token",
#     provider="environment-variable",
#     parameters={"variable": "NAUTOBOT_GOLDEN_CONFIG_GIT_TOKEN"},
# )

# SecretsGroupAssociation.objects.create(
#     secrets_group=secrets_group,
#     secret=environment_secret,
#     access_type=SecretsGroupAccessTypeChoices.TYPE_HTTP,
#     secret_type=SecretsGroupSecretTypeChoices.TYPE_TOKEN,
# )

# backup_repository=GitRepository.objects.filter(provided_contents__contains="nautobot_golden_config.backupconfigs").first()
# intended_repository=GitRepository.objects.filter(provided_contents__contains="nautobot_golden_config.intendedconfigs").first()
# jinja_repository=GitRepository.objects.filter(provided_contents__contains="nautobot_golden_config.jinjatemplate").first()

# if not backup_repository.secrets_group is not None:
#     backup_repository.secrets_group = secrets_group
#     backup_repository.validated_save()
# if not intended_repository.secrets_group is not None:
#     intended_repository.secrets_group = secrets_group
#     intended_repository.validated_save()
# if not jinja_repository.secrets_group is not None:
#     jinja_repository.secrets_group = secrets_group
#     jinja_repository.validated_save()